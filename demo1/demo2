 <!DOCTYPE html>
<html>
<head>
	<title>text</title>
	<script src="./three.js"></script>
	 <script src="./jquery-3.1.1.js"></script>
	 <script src="./stats.min.js"></script>
	 <script src="./dat.gui.min.js"></script>
	 <style>
	 	body{
	 		margin: 0;
	 		overflow: hidden;
	 	}
	 </style>
</head>
<body>
     <div id="WebGL-output"></div>
     <div id="Stats-output"></div>
     <script>
     	function init(){
     		var stats = initStats();
            var clock = new THREE.Clock();
     	    var scene = new THREE.Scene();
     	    var camera = new THREE.PerspectiveCamera(45,window.innerWidth/window.innerHeight,0.1, 1000);
     	    var renderer = new THREE.WebGLRenderer();
     	    renderer.setClearColor(new THREE.Color( 0xEEEEEE,1.0 ));
            renderer.setSize(window.innerWidth,window.innerHeight);
            renderer.shadowMapEnabled = true;

            var axes = new THREE.AxisHelper(20);
            scene.add(axes);

            var planeGeometry = new THREE.PlaneGeometry( 60, 20);
            var planeMaterial = new THREE.MeshLambertMaterial({color:0xffffff});
            var plane = new THREE.Mesh(planeGeometry,planeMaterial);
             
          //  plane.receiveShadow = true;
            plane.rotation.x = -0.5*Math.PI;
            plane.position.x = 15;
            plane.position.y = 0;
            plane.position.z = 0;
            plane.receiveShadow = true;  
            console.log( plane.receiveShadow);
            scene.add(plane);
  
            var cubeGeometry = new THREE.BoxGeometry(4,4,4);
            var cubeMaterial = new THREE.MeshLambertMaterial( { color:0xff0000} );
            var cube = new THREE.Mesh(cubeGeometry,cubeMaterial);
           
         //  
            cube.position.x = -4;
            cube.position.y = 3;
            cube.position.z = 0;
             cube.castShadow = true;    
            scene.add(cube);
            
            var sphereGeomrtry = new THREE.SphereGeometry(4,20,20);
            var sphereMaterial = new THREE.MeshLambertMaterial( {color:0x7777ff} );

            var sphere = new THREE.Mesh(sphereGeomrtry,sphereMaterial);

          //  //sphere
            sphere.position.x = 20;
            sphere.position.y = 4;
            sphere.position.z = 2;  
            sphere.castShadow = true; 
                 
            scene.add(sphere);

            var spotLight = new THREE.SpotLight( 0xffffff );
            spotLight.position.set( -40, 60, -10);
            spotLight.castShadow = true;
            console.log( spotLight.castShadow );
            scene.add(spotLight);

            camera.position.x = -30;
            camera.position.y = 40;
            camera.position.z = 30;
            camera.lookAt(scene.position);
            var controls = new function(){
            	this.rotationSpeed = 0.02;
          	    this.bouncingSpeed = 0.03;
               }   

     
             var gui = new dat.GUI();
              gui.add(controls,'rotationSpeed',0,0.5);
              gui.add(controls,'bouncingSpeed',0,0.5);
         
    
            $('#WebGL-output').append(renderer.domElement);
            //renderer.render(scene,camera);
            renderScence();
        function initStats(){
     		var stats = new Stats();
     		stats.setMode(0);
     		stats.domElement.style.position = 'absolute';
     		stats.domElement.style.left = '0px';
     		stats.domElement.style.top = '0px';
     		document.getElementById('Stats-output').appendChild(stats.domElement);
     		return stats;
  

     	}
            

           // var controls = new function(){
           // 	this.rotationSpeed = 0.02;
           // 	this.bouncingSpeed = 0.03;

           // } 
   
   
 

     	  var step = 0;
     	      function renderScence() {   
            	stats.update();
                cube.rotation.x += controls.rotationSpeed;
                cube.rotation.y += controls.rotationSpeed;
                cube.rotation.z += controls.rotationSpeed;
                step += controls.bouncingSpeed;
                cube.position.x = 20 + (10*(Math.cos(step)));
                cube.position.y = 2 + (10*Math.abs(Math.sin(step)));
            	requestAnimationFrame(renderScence);
            	renderer.render(scene,camera);
            	
          } 

     	};
         window.onload = init;


            

     </script>
</body>
</html>


